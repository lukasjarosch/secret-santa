package actions

import (

  "fmt"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/gobuffalo/uuid"

  "secret_santa/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (GroupUser)
// DB Table: Plural (group_users)
// Resource: Plural (GroupUsers)
// Path: Plural (/group_users)
// View Template Folder: Plural (/templates/group_users/)

// GroupUsersResource is the resource for the GroupUser model
type GroupUsersResource struct{
  buffalo.Resource
}

// List gets all GroupUsers. This function is mapped to the path
// GET /group_users
func (v GroupUsersResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  groupUsers := &models.GroupUsers{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all GroupUsers from the DB
  if err := q.All(groupUsers); err != nil {
    return err
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)
  c.Set("groupID", c.Param("group_id"))

  return c.Render(200, r.Auto(c, groupUsers))
}

// Show gets the data for one GroupUser. This function is mapped to
// the path GET /group_users/{group_user_id}
func (v GroupUsersResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty GroupUser
  groupUser := &models.GroupUser{}

  // To find the GroupUser the parameter group_user_id is used.
  if err := tx.Find(groupUser, c.Param("group_user_id")); err != nil {
    return c.Error(404, err)
  }

  c.Set("groupID", c.Param("group_id"))
  return c.Render(200, r.Auto(c, groupUser))
}

// New renders the form for creating a new GroupUser.
// This function is mapped to the path GET /group_users/new
func (v GroupUsersResource) New(c buffalo.Context) error {
  c.Set("groupID", c.Param("group_id"))
  return c.Render(200, r.Auto(c, &models.GroupUser{}))
}
// Create adds a GroupUser to the DB. This function is mapped to the
// path POST /group_users
func (v GroupUsersResource) Create(c buffalo.Context) error {
  // Allocate an empty GroupUser
  groupUser := &models.GroupUser{}
  groupID := c.Param("group_id")
  c.Set("groupID", groupID)

  // Bind groupUser to the html form elements
  if err := c.Bind(groupUser); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  gId, _ := uuid.FromString(groupID)
  groupUser.GroupID = gId

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(groupUser)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, groupUser))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "groupUser.created.success"))
  // and redirect to the group_users index page
  return c.Render(201, r.Auto(c, groupUser))
}

// Edit renders a edit form for a GroupUser. This function is
// mapped to the path GET /group_users/{group_user_id}/edit
func (v GroupUsersResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty GroupUser
  groupUser := &models.GroupUser{}

  if err := tx.Find(groupUser, c.Param("group_user_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, groupUser))
}
// Update changes a GroupUser in the DB. This function is mapped to
// the path PUT /group_users/{group_user_id}
func (v GroupUsersResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty GroupUser
  groupUser := &models.GroupUser{}

  if err := tx.Find(groupUser, c.Param("group_user_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind GroupUser to the html form elements
  if err := c.Bind(groupUser); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(groupUser)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, groupUser))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "groupUser.updated.success"))
  // and redirect to the group_users index page
  return c.Render(200, r.Auto(c, groupUser))
}

// Destroy deletes a GroupUser from the DB. This function is mapped
// to the path DELETE /group_users/{group_user_id}
func (v GroupUsersResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty GroupUser
  groupUser := &models.GroupUser{}

  // To find the GroupUser the parameter group_user_id is used.
  if err := tx.Find(groupUser, c.Param("group_user_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy(groupUser); err != nil {
    return err
  }

  // If there are no errors set a flash message
  c.Flash().Add("success", T.Translate(c, "groupUser.destroyed.success"))
  // Redirect to the group_users index page
  return c.Render(200, r.Auto(c, groupUser))
}
